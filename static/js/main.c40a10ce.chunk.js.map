{"version":3,"sources":["ComputerAI.js","components/Box/Box.jsx","components/Square/Square.jsx","components/BoardSizeSelect/BoardSizeSelect.jsx","components/Board/Board.jsx","components/StartForm/StartForm.jsx","components/Info/Info.jsx","components/Score/Score.jsx","components/Mode/Mode.jsx","components/Title/Title.jsx","App.js","serviceWorker.js","index.js"],"names":["squareArray","size","Box","className","this","props","children","Component","Square","handleClick","event","row","target","parentElement","rowIndex","col","cellIndex","handleSquareClick","value","onClick","dirs","getBest","squareArrayP","sizeP","difficultyLevel","bestPoint","countSignedCells","parseInt","step_1","step_2_3_4","optionalPoint","optionalPoints","dirIndex","length","curRow","curCol","push","Math","floor","random","step_5","point","curSquare","nextSquare","step_6","step_5_6","isEmptyLine","step_7","step_11","getRandomFreeCell","signToLookFor","checkTwoOfMySignInRowOrCol","checkTwoOfSignsInRowOrCol","index","checkTwoOfSignsInFirstSlant","checkTwoOfSignsInSecondSlant","checkTwoOfSignsInSlants","count","isRowChecking","a","b","isRow","numLine","values","options","BoardSizeSelect","state","curBoardSize","text","createDropdown","createOptions","map","option","i","Dropdown","Item","key","eventKey","changeBoardSize","integerEventKey","setState","filter","setBoardSize","forEach","Error","DropdownButton","variant","onSelect","title","Board","boardSize","newBoardSize","Array","fill","initBoard","checkIsAbleToClicked","playMode","isFirstPlayerTurn","handleMove","makeComputerMove","newSquareArray","checkWinner","gameEnded","checkTie","switchPlayer","handleComputerMove","indexOf","board","firstValue","createTable","table","j","currentPlace","place","handleChange","setTimeout","checkIsComputerAbleToPlay","bind","gameStarted","winner","style","padding","StartForm","backToSelectMode","setPlayModeFunc","preventDefault","error","firstPlayer","isOnePlayer","secondPlayer","trim","players","name","score","handleStart","showText","isNeedTimout","Form","Row","Col","Control","onChange","placeholder","Button","type","Info","undefined","playAgain","backToMenu","playersNames","Score","player","imgKey","Mode","PlayerVsPc","setDifficultyLevelFunc","TwoPlayers","addStarImages","numOfImages","images","src","alt","clsName","color","Title","App","useState","setPlayers","setGameStarted","setWinner","setIsFirstPlayerTurn","setPlayMode","setDifficultyLevel","isStartFormNeedTimeout","setIsStartFormNeedTimeout","currentBoard","React","createRef","startGame","current","class","status","winnerIndex","ref","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.c40a10ce.chunk.js","sourcesContent":["var squareArray;\r\nvar size;\r\nconst ComputerSign = 'O'\r\nconst EnemySign = 'X'\r\n\r\nconst dirs = [\r\n    { \"row\": -1, \"col\": 0 }, // Up\r\n    { \"row\": 0, \"col\": 1 },  // Right\r\n    { \"row\": 1, \"col\": 0 },  // Down\r\n    { \"row\": 0, \"col\": -1 }  // Left\r\n]\r\n\r\n// Returns point { row, col } of the computers best move.\r\nexport function getBest(squareArrayP, sizeP, difficultyLevel) {\r\n    squareArray = squareArrayP;\r\n    size = sizeP;\r\n    let bestPoint = null;\r\n\r\n    bestPoint = step_1()\r\n\r\n    if (bestPoint === null) {\r\n        bestPoint = step_2_3_4(ComputerSign)\r\n    }\r\n\r\n    if (bestPoint === null) {\r\n        bestPoint = step_2_3_4(EnemySign);\r\n    }\r\n    \r\n    if (difficultyLevel >= 2) {\r\n        if (bestPoint === null) {\r\n            bestPoint = step_5_6();\r\n        }\r\n    }\r\n\r\n    if (difficultyLevel >= 3) {\r\n        if (bestPoint === null) {\r\n            bestPoint = step_7();\r\n        }\r\n\r\n        if (bestPoint === null) {\r\n            bestPoint = step_11();\r\n        }\r\n    }\r\n\r\n    if (bestPoint !== null) {\r\n        return bestPoint\r\n    }\r\n\r\n    return getRandomFreeCell()\r\n}\r\n\r\nfunction step_1() {\r\n    if ((countSignedCells() <= 1) &&\r\n        (squareArray[parseInt(size / 2)][parseInt(size / 2)] === null)) {\r\n        return { \"row\": parseInt(size / 2), \"col\": parseInt(size / 2) };\r\n    }\r\n\r\n    return null;\r\n}\r\n\r\nfunction step_2_3_4(signToLookFor) {\r\n    let point = checkTwoOfSignsInRowOrCol(signToLookFor)\r\n\r\n    if (point === null) {\r\n        point = checkTwoOfSignsInSlants(signToLookFor)\r\n    }\r\n\r\n    return point;\r\n}\r\n\r\nfunction step_5_6() {\r\n    if ((countSignedCells() === 3) &&\r\n        (squareArray[parseInt(size / 2)][parseInt(size / 2)] === ComputerSign)) {\r\n        let optionalPoint = step_5();\r\n\r\n        if (optionalPoint === null) {\r\n            optionalPoint = step_6();\r\n        }\r\n\r\n        if (optionalPoint !== null) {\r\n            return optionalPoint;\r\n        }\r\n    }\r\n\r\n    return null;\r\n}\r\n\r\nfunction step_7() {\r\n    let optionalPoints = [];\r\n\r\n    if (isEmptyLine(true, 0) && isEmptyLine(false, 0)) {\r\n        optionalPoints.push({ \"row\": 0, \"col\": 0 });\r\n    } if (isEmptyLine(true, 0) && isEmptyLine(false, size - 1)) {\r\n        optionalPoints.push({ \"row\": 0, \"col\": size - 1 });\r\n    } if (isEmptyLine(true, size - 1) && isEmptyLine(false, 0)) {\r\n        optionalPoints.push({ \"row\": size - 1, \"col\": 0 });\r\n    } if (isEmptyLine(true, size - 1) && isEmptyLine(false, size - 1)) {\r\n        optionalPoints.push({ \"row\": size - 1, \"col\": size - 1 });\r\n    }\r\n\r\n    if (optionalPoints.length !== 0) {\r\n        let point = optionalPoints[Math.floor(Math.random() * optionalPoints.length)];\r\n        return point;\r\n    }\r\n\r\n    return null;\r\n}\r\n\r\nfunction step_11() {\r\n    let optionalPoints = [];\r\n    if (squareArray[0][0] === null) {\r\n        optionalPoints.push({ \"row\": 0, \"col\": 0 });\r\n    } if (squareArray[0][size - 1] === null) {\r\n        optionalPoints.push({ \"row\": 0, \"col\": size - 1 });\r\n    } if (squareArray[size - 1][0] === null) {\r\n        optionalPoints.push({ \"row\": size - 1, \"col\": 0 });\r\n    } if (squareArray[size - 1][size - 1] === null) {\r\n        optionalPoints.push({ \"row\": size - 1, \"col\": size - 1 });\r\n    }\r\n\r\n    if (optionalPoints.length !== 0) {\r\n        let point = optionalPoints[Math.floor(Math.random() * optionalPoints.length)];\r\n        return point;\r\n    }\r\n\r\n    return null;\r\n}\r\n\r\nfunction countSignedCells() {\r\n    let count = 0;\r\n    for (let curRow = 0; curRow < size; curRow++) {\r\n        for (let curCol = 0; curCol < size; curCol++) {\r\n            if (squareArray[curRow][curCol] !== null) {\r\n                count++;\r\n            }\r\n        }\r\n    }\r\n\r\n    return count;\r\n}\r\n\r\nfunction checkTwoOfSignsInRowOrCol(signToLookFor) {\r\n    let optionalPoint = checkTwoOfMySignInRowOrCol(true, signToLookFor);\r\n\r\n    if (optionalPoint === null) {\r\n        optionalPoint = checkTwoOfMySignInRowOrCol(false, signToLookFor);\r\n    }\r\n\r\n    return optionalPoint;\r\n}\r\n\r\nfunction checkTwoOfSignsInSlants(signToLookFor) {\r\n    let optionalPoint = checkTwoOfSignsInFirstSlant(signToLookFor);\r\n\r\n    if (optionalPoint === null) {\r\n        optionalPoint = checkTwoOfSignsInSecondSlant(signToLookFor)\r\n    }\r\n\r\n    return optionalPoint;\r\n}\r\n\r\n\r\n// isRowChecking === true :  a - row, b - col\r\n// isRowChecking === false: a - col, b - row\r\nfunction checkTwoOfMySignInRowOrCol(isRowChecking, signToLookFor) {\r\n    for (let a = 0; a < size; a++) {\r\n        let point = null;\r\n        for (let b = 0; b < size; b++) {\r\n            if (squareArray[isRowChecking ? a : b][isRowChecking ? b : a] === null) {\r\n                if (point === null) {\r\n                    point = { \"row\": isRowChecking ? a : b, \"col\": isRowChecking ? b : a }\r\n                } else {\r\n                    point = null;\r\n                    break;\r\n                }\r\n            } else if (squareArray[isRowChecking ? a : b][isRowChecking ? b : a] !== signToLookFor) {\r\n                point = null;\r\n                break;\r\n            }\r\n        }\r\n\r\n        if (point !== null) {\r\n            return point;\r\n        }\r\n    }\r\n\r\n    return null;\r\n}\r\n\r\nfunction checkTwoOfSignsInFirstSlant(signToLookFor) {\r\n    let point = null;\r\n    for (let index = 0; index < size; index++) {\r\n        if (squareArray[index][index] === null) {\r\n            if (point === null) {\r\n                point = { \"row\": index, \"col\": index }\r\n            } else {\r\n                return null;\r\n            }\r\n        } else if (squareArray[index][index] !== signToLookFor) {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    return point;\r\n}\r\n\r\nfunction checkTwoOfSignsInSecondSlant(signToLookFor) {\r\n    let point = null;\r\n    for (let index = size - 1; index >= 0; index--) {\r\n        if (squareArray[size - 1 - index][index] === null) {\r\n            if (point === null) {\r\n                point = { \"row\": size - 1 - index, \"col\": index }\r\n            } else {\r\n                return null;\r\n            }\r\n        } else if (squareArray[size - 1 - index][index] !== signToLookFor) {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    return point;\r\n}\r\n\r\nfunction step_5() {\r\n    if (((squareArray[0][0] === squareArray[size - 1][size - 1]) &&\r\n        (squareArray[0][0] === EnemySign)) ||\r\n        ((squareArray[0][size - 1] === squareArray[size - 1][0]) &&\r\n            (squareArray[0][size - 1] === EnemySign))) {\r\n\r\n        let optionalPoints = [];\r\n        for (let dirIndex = 0; dirIndex < dirs.length; dirIndex++) {\r\n            let curRow = parseInt(size / 2) + dirs[dirIndex].row;\r\n            let curCol = parseInt(size / 2) + dirs[dirIndex].col;\r\n            if (squareArray[curRow][curCol] === null) {\r\n                optionalPoints.push({ \"row\": curRow, \"col\": curCol })\r\n            }\r\n        }\r\n\r\n        if (optionalPoints.length !== 0) {\r\n            return optionalPoints[Math.floor(Math.random() * optionalPoints.length)];\r\n        }\r\n    }\r\n\r\n    return null;\r\n}\r\n\r\nfunction step_6() {\r\n    let point = null;\r\n\r\n    for (let dirIndex = 0; dirIndex < dirs.length; dirIndex++) {\r\n        let curSquare =\r\n        {\r\n            \"row\": parseInt(size / 2) + dirs[dirIndex].row,\r\n            \"col\": parseInt(size / 2) + dirs[dirIndex].col\r\n        };\r\n        let nextSquare =\r\n        {\r\n            \"row\": parseInt(size / 2) + dirs[(dirIndex + 1) % dirs.length].row,\r\n            \"col\": parseInt(size / 2) + dirs[(dirIndex + 1) % dirs.length].col\r\n        };\r\n\r\n        if ((squareArray[curSquare.row][curSquare.col] ===\r\n            squareArray[nextSquare.row][nextSquare.col]) &&\r\n            (squareArray[curSquare.row][curSquare.col] ===\r\n                EnemySign)) {\r\n\r\n            point =\r\n            {\r\n                \"row\": (dirIndex % 2 === 0) ? curSquare.row : nextSquare.row,\r\n                \"col\": (dirIndex % 2 === 0) ? nextSquare.col : curSquare.col\r\n            };\r\n        }\r\n    }\r\n\r\n    return point;\r\n}\r\n\r\nfunction isEmptyLine(isRow, numLine) {\r\n    let isEmptyLine = true;\r\n    for (let index = 0; index < size; index++) {\r\n        if (squareArray[isRow ? numLine : index][isRow ? index : numLine] !== null) {\r\n            isEmptyLine = false;\r\n        }\r\n    }\r\n\r\n    return isEmptyLine;\r\n}\r\n\r\nfunction getRandomFreeCell() {\r\n    let row, col;\r\n    do {\r\n        row = Math.floor(Math.random() * size)\r\n        col = Math.floor(Math.random() * size)\r\n    } while (squareArray[row][col] !== null)\r\n\r\n    return { \"row\": row, \"col\": col };\r\n}","import React, { Component } from 'react';\r\nimport './Box.css';\r\n\r\nclass Box extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"box\">\r\n                {this.props.children}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Box;","import React, { Component } from 'react';\r\nimport './Square.css'\r\n\r\nclass Square extends Component {\r\n\r\n    handleClick = (event) => {\r\n        let row = event.target.parentElement.rowIndex;\r\n        let col = event.target.cellIndex;\r\n        this.props.handleSquareClick(row, col);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <td className={this.props.value} onClick={this.handleClick}></td>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Square;","import React, { Component } from \"react\";\r\nimport './BoardSizeSelect.css'\r\nimport { DropdownButton, Dropdown } from 'react-bootstrap';\r\n\r\nvar values = [3, 5, 7, 9, 11]\r\nvar options = [];\r\n\r\nclass BoardSizeSelect extends Component {\r\n\r\n  componentDidMount() {\r\n    this.createOptions();\r\n    this.setState({ curBoardSize: options[0] })\r\n  }\r\n\r\n  state = {\r\n    curBoardSize: {\r\n      text: \"\",\r\n      value: 0\r\n    }\r\n  };\r\n\r\n  createOptions() {\r\n    options = []\r\n    values.forEach(value => {\r\n      if (value % 2 === 0) {\r\n        throw new Error(\"Optional board Size is even - (\" + value + \"). (Optional_Board_Size % 2 = 0)\");\r\n      } else {\r\n        options.push({\r\n          text: value + \" X \" + value,\r\n          value: value\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  createDropdown = () => {\r\n    this.createOptions();\r\n    return options.map(function (option, i) {\r\n      return (\r\n        <Dropdown.Item key={i} eventKey={option.value}>\r\n          <div>\r\n            <span>{option.text}</span>\r\n          </div>\r\n        </Dropdown.Item>)\r\n    });\r\n  }\r\n\r\n  changeBoardSize = (eventKey) => {\r\n    let integerEventKey = parseInt(eventKey, 10);\r\n    this.setState({\r\n      curBoardSize: options.filter(option =>\r\n        option.value === integerEventKey)[0]\r\n    });\r\n\r\n    this.props.setBoardSize(integerEventKey);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <DropdownButton className=\"select-board-size-dropdown\" variant=\"danger\" onSelect={this.changeBoardSize} title={this.state.curBoardSize.text}>\r\n        {this.createDropdown()}\r\n      </DropdownButton>\r\n    )\r\n  }\r\n}\r\n\r\nexport default BoardSizeSelect;","import React, { Component } from 'react';\r\nimport './Board.css'\r\nimport Square from '../Square/Square'\r\nimport { getBest } from '../../ComputerAI.js'\r\nimport BoardSizeSelect from '../BoardSizeSelect/BoardSizeSelect'\r\n\r\n// You must have odd board size\r\nconst START_BOARD_SIZE = 3;\r\n\r\nclass Board extends Component {\r\n\r\n    componentDidMount() {\r\n        this.setBoardSize(START_BOARD_SIZE)\r\n    }\r\n\r\n    state = {\r\n        boardSize: 0,\r\n        squareArray: null\r\n    }\r\n\r\n    setBoardSize = (newBoardSize) => {\r\n        if (newBoardSize % 2 === 0) {\r\n            throw new Error(\"Board Size is even. (Board_Size % 2 = 0)\");\r\n        }\r\n\r\n        this.setState({\r\n            boardSize: newBoardSize,\r\n            squareArray: new Array(newBoardSize).fill(null).map(() => new Array(newBoardSize).fill(null))\r\n        })\r\n    }\r\n\r\n    initBoard = () => {\r\n        this.setState({\r\n            squareArray: new Array(this.state.boardSize).fill(null).map(() => new Array(this.state.boardSize).fill(null))\r\n        });\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        if (this.props.playMode === 1) {\r\n            this.makeComputerMove();\r\n        }\r\n    }\r\n\r\n    handleSquareClick = (row, col) => {\r\n        if (!this.checkIsAbleToClicked(row, col)) {\r\n            return;\r\n        }\r\n\r\n        if (this.props.playMode === 1) {\r\n\r\n            if (this.props.isFirstPlayerTurn) {\r\n                this.handleMove(row, col)\r\n            }\r\n            this.makeComputerMove();\r\n\r\n        } else if (this.props.playMode === 2) {\r\n            this.handleMove(row, col)\r\n        }\r\n    }\r\n\r\n    makeComputerMove() {\r\n        setTimeout(function () {\r\n            if (!this.props.isFirstPlayerTurn) {\r\n                if (this.checkIsComputerAbleToPlay()) {\r\n                    this.handleComputerMove();\r\n                }\r\n            }\r\n        }.bind(this), 1500);\r\n    }\r\n\r\n    checkIsComputerAbleToPlay() {\r\n        return ((this.props.gameStarted) &&\r\n            (this.props.winner === null));\r\n    }\r\n\r\n    checkIsAbleToClicked(row, col) {\r\n        return (this.checkIsComputerAbleToPlay() &&\r\n            (this.state.squareArray[row][col] === null));\r\n    }\r\n\r\n    handleMove = (row, col) => {\r\n\r\n        let newSquareArray = [...this.state.squareArray];\r\n        newSquareArray[row][col] = this.props.isFirstPlayerTurn ? 'X' : 'O';\r\n        this.setState({ squareArray: newSquareArray });\r\n\r\n        if (this.checkWinner()) {\r\n            this.props.gameEnded('win');\r\n        } else if (this.checkTie()) {\r\n            this.props.gameEnded('tie');\r\n        }\r\n\r\n        this.props.switchPlayer();\r\n    }\r\n\r\n    handleComputerMove = () => {\r\n        let point = getBest(this.state.squareArray, this.state.boardSize, this.props.difficultyLevel);\r\n        if (point !== null) {\r\n            this.handleMove(point.row, point.col)\r\n        }\r\n    }\r\n\r\n    checkTie = () => {\r\n        for (let arr of this.state.squareArray) {\r\n            if (arr.indexOf(null) !== -1) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    checkWinner = () => {\r\n        let board = this.state.squareArray;\r\n\r\n        // Check rows\r\n        for (let row = 0; row < this.state.boardSize; row++) {\r\n            let firstValue = board[row][0];\r\n            for (let col = 1; col < this.state.boardSize; col++) {\r\n                if ((firstValue == null) ||\r\n                    (board[row][col] !== firstValue)) {\r\n                    break;\r\n                }\r\n\r\n                if (col === this.state.boardSize - 1) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n\r\n        // Check colums\r\n        for (let col = 0; col < this.state.boardSize; col++) {\r\n            let firstValue = board[0][col];\r\n            for (let row = 1; row < this.state.boardSize; row++) {\r\n                if ((firstValue == null) ||\r\n                    (board[row][col] !== firstValue)) {\r\n                    break;\r\n                }\r\n\r\n                if (row === this.state.boardSize - 1) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n\r\n        // Check first slant\r\n        let firstValue = board[0][0];\r\n        for (let index = 0; index < this.state.boardSize; index++) {\r\n            if ((firstValue == null) ||\r\n                (board[index][index] !== firstValue)) {\r\n                break;\r\n            }\r\n\r\n            if (index === this.state.boardSize - 1) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        // Check second slant\r\n        firstValue = board[0][this.state.boardSize - 1];\r\n        for (let index = this.state.boardSize - 1; index >= 0; index--) {\r\n            if ((firstValue == null) ||\r\n                (board[this.state.boardSize - 1 - index][index] !== firstValue)) {\r\n                break;\r\n            }\r\n\r\n            if (index === 0) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    createTable = () => {\r\n        let table = [];\r\n        for (let i = 0; i < this.state.boardSize; i++) {\r\n            let children = [];\r\n            for (let j = 0; j < this.state.boardSize; j++) {\r\n                let currentPlace = j + (i * this.state.boardSize);\r\n                children.push(<Square key={currentPlace} place={currentPlace} value={this.state.squareArray[i][j]} handleSquareClick={this.handleSquareClick} />);\r\n            }\r\n\r\n            table.push(<tr key={i}>{children}</tr>);\r\n        }\r\n\r\n        return table;\r\n    }\r\n\r\n    handleChange = () => {\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={\"board wrapper \" + (this.props.gameStarted ? \"full-width\" : \"eighty-width\")}>\r\n                <table className=\"squaresTable\">\r\n                    <tbody>\r\n                        {this.createTable()}\r\n                    </tbody>\r\n                </table>\r\n                {!this.props.gameStarted &&\r\n\r\n                    <div style={{ padding: \"30px\" }}>\r\n                        <h3>Choose board Size:</h3>\r\n                        <br />\r\n                        <BoardSizeSelect setBoardSize={this.setBoardSize} />\r\n                    </div>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Board;","import React, { Component } from 'react';\r\nimport './StartForm.css';\r\nimport { Form, Row, Col, Button } from 'react-bootstrap';\r\n\r\nconst START_SCORE = 0;\r\n\r\nclass StartForm extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            error: null,\r\n            showText: false,\r\n            firstPlayer: \"\",\r\n            secondPlayer: \"\"\r\n        }\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n    }\r\n\r\n    handleChange(event) {\r\n        this.setState({ [event.target.name]: event.target.value });\r\n    }\r\n\r\n    componentDidMount() {\r\n        // Timeout must be like in '.form-enter' animation seconds (in the css file)\r\n        setTimeout(() => {\r\n            this.setState({ showText: true })\r\n        }, this.props.isNeedTimout ? 1500 : 0)\r\n    }\r\n\r\n    backToSelectMode = () => {\r\n        this.props.setPlayModeFunc(0)\r\n    }\r\n\r\n    handleClick = async (event) => {\r\n        event.preventDefault();\r\n\r\n        await this.setState({\r\n            error: null\r\n        })\r\n\r\n        let firstPlayer = this.state.firstPlayer;\r\n        let secondPlayer;\r\n\r\n        if (this.props.isOnePlayer) {\r\n            switch (this.props.difficultyLevel) {\r\n                case \"1\":\r\n                    secondPlayer = \"John the lemon :)\"\r\n                    break;\r\n                case \"2\":\r\n                    secondPlayer = \"Think Your'e Good?\"\r\n                    break;\r\n                case \"3\":\r\n                    secondPlayer = \"Best PC EVER !\"\r\n                    break;\r\n\r\n                default:\r\n                    secondPlayer = \"Not sure...\"\r\n                    break;\r\n            }\r\n        } else {\r\n            secondPlayer = this.state.secondPlayer;\r\n            if (secondPlayer.trim() === '') {\r\n                await this.setState({\r\n                    error: 'PUT A NAME YOU SON OF A BITCH!'\r\n                })\r\n            }\r\n        }\r\n\r\n        if (firstPlayer.trim() === '') {\r\n            await this.setState({\r\n                error: 'PUT A NAME YOU SON OF A BITCH!'\r\n            })\r\n        }\r\n\r\n        if (this.state.error != null) {\r\n            return;\r\n        }\r\n\r\n        var players = [\r\n            {\r\n                name: firstPlayer,\r\n                score: START_SCORE\r\n            },\r\n            {\r\n                name: secondPlayer,\r\n                score: START_SCORE\r\n            }\r\n        ];\r\n\r\n        this.props.handleStart(players);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                {this.state.showText && <Form className={'form-enter'}>\r\n                    <Row>\r\n                        <Col>\r\n                            <Form.Control onChange={this.handleChange} name=\"firstPlayer\" placeholder={this.props.isOnePlayer === false ? \"First player\" : \"Your name\"} />\r\n                        </Col>\r\n                        {this.props.isOnePlayer === false ?\r\n                            <Col>\r\n                                <Form.Control onChange={this.handleChange} name=\"secondPlayer\" placeholder=\"Second player\" />\r\n                            </Col> : null}\r\n                    </Row>\r\n                    <Row>\r\n                        <Button variant=\"info\" type=\"submit\" className=\"play-button\" onClick={this.handleClick}>Play!</Button>\r\n                    </Row>\r\n                    {this.state.error === null ? '' : <div className='err'>{this.state.error}</div>}\r\n                    <Row>\r\n                        <Button variant=\"dark\" type=\"submit\" className=\"back-to-select-mode\" onClick={this.backToSelectMode}>Select different mode</Button>\r\n                    </Row>\r\n                </Form>}\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default StartForm;","import React, { Component } from 'react';\r\nimport './Info.css';\r\nimport { Button } from 'react-bootstrap';\r\n\r\nclass Info extends Component {\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"info\">\r\n                {this.props.winner !== null ?\r\n                    <>\r\n                        {this.props.winner === undefined ?\r\n                            <h1> It's a tie ...</h1>\r\n                            :\r\n                            <h1> {this.props.winner} is the Winner!</h1>}\r\n                        <div className=\"row\">\r\n                            <Button className=\"col-lg-4 col-md-4 col-sm-4\" variant=\"info\" type=\"submit\" onClick={this.props.playAgain}>Again?</Button>\r\n                            <div className=\"col-lg-4 col-md-4 col-sm-4\"></div>\r\n                            <Button className=\"col-lg-4 col-md-4 col-sm-4\" variant=\"warning\" type=\"submit\" onClick={this.props.backToMenu}>Back to menu...</Button>\r\n                        </div>\r\n                    </> :\r\n                    <span className=\"turn-info\">It's <b>{this.props.playersNames[this.props.isFirstPlayerTurn ? 0 : 1]}</b> Turn!</span>\r\n                }\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Info;","import React, { Component } from 'react';\r\nimport './Score.css';\r\n\r\nclass Score extends Component {\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"scroe-board\">\r\n                <h1 className=\"score-name\">{this.props.player.name}</h1>\r\n                <h2>Score: <span className=\"score-points\">{this.props.player.score}</span></h2>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Score;","import React, { Component } from 'react';\r\nimport './Mode.css';\r\nimport { Button, DropdownButton, Dropdown } from 'react-bootstrap';\r\n\r\nvar imgKey = 0\r\nclass Mode extends Component {\r\n\r\n    PlayerVsPc = (eventKey) => {\r\n        this.props.setPlayModeFunc(1)\r\n        this.props.setDifficultyLevelFunc(eventKey)\r\n    }\r\n\r\n    TwoPlayers = () => {\r\n        this.props.setPlayModeFunc(2)\r\n    }\r\n\r\n    addStarImages = (numOfImages) => {\r\n        let images = []\r\n\r\n        for (let i = 0; i < numOfImages; i++) {\r\n            images.push(<img key={imgKey++} className=\"star-icon\" src=\"https://cdn.pixabay.com/photo/2016/12/18/11/02/star-1915449_960_720.png\" alt=\"starIcon\" />)\r\n        }\r\n\r\n        return images\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={'info ' + this.props.clsName}>\r\n                <h1>Select play mode:</h1>\r\n                <hr />\r\n\r\n                <div className=\"row mode-btn-div\">\r\n                    <div className=\"col-6\">\r\n                        <DropdownButton onSelect={this.PlayerVsPc} title=\"Me Vs PC \">\r\n                            <Dropdown.Item eventKey=\"1\">\r\n                                <div className=\"row\">\r\n                                    <span style={{ color: \"green\" }} className=\"col-6\">Easy</span>\r\n                                    <div className=\"col-6\">\r\n                                        {this.addStarImages(1)}\r\n                                    </div>\r\n                                </div>\r\n                            </Dropdown.Item>\r\n                            <Dropdown.Item eventKey=\"2\">\r\n                                <div className=\"row levels-div\">\r\n                                    <span style={{ color: \"#e96420\" }} className=\"col-6\">Medium</span>\r\n                                    <div className=\"col-6\">\r\n                                        {this.addStarImages(2)}\r\n                                    </div>\r\n                                </div>\r\n                            </Dropdown.Item>\r\n                            <Dropdown.Item eventKey=\"3\">\r\n                                <div className=\"row levels-div\">\r\n                                    <span style={{ color: \"#c60416\" }} className=\"col-6\">Expert</span>\r\n                                    <div className=\"col-6\">\r\n                                        {this.addStarImages(3)}\r\n                                    </div>\r\n                                </div>\r\n                            </Dropdown.Item>\r\n                        </DropdownButton>\r\n                    </div>\r\n                    <div className=\"col-6\">\r\n                        <Button variant=\"primary\" type=\"submit\" onClick={this.TwoPlayers} >2 Players</Button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Mode;","import React, { Component } from 'react'\r\nimport './Title.css';\r\n\r\nclass Title extends Component {\r\n    render() {\r\n        return (\r\n            <h1 className=\"title-h1\">\r\n                <span className=\"title-span\">\"TIC</span><span className=\"title-span\">TAC</span><span className=\"title-span\">TOE\"</span>\r\n            </h1>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Title;","import React, {\r\n  useState\r\n} from 'react'\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport './App.css'\r\nimport Box from './components/Box/Box'\r\nimport Board from './components/Board/Board'\r\nimport StartForm from './components/StartForm/StartForm'\r\nimport Info from './components/Info/Info'\r\nimport Score from './components/Score/Score'\r\nimport { Col } from 'react-bootstrap'\r\nimport Mode from './components/Mode/Mode'\r\nimport Title from './components/Title/Title'\r\n\r\nfunction App() {\r\n\r\n  const [players, setPlayers] = useState([]);\r\n  const [gameStarted, setGameStarted] = useState(false);\r\n  const [winner, setWinner] = useState(null);\r\n  const [isFirstPlayerTurn, setIsFirstPlayerTurn] = useState(true);\r\n  const [playMode, setPlayMode] = useState(0);\r\n  const [difficultyLevel, setDifficultyLevel] = useState(0);\r\n  const [isStartFormNeedTimeout, setIsStartFormNeedTimeout] = useState(true);\r\n\r\n  const currentBoard = React.createRef();\r\n\r\n  const startGame = (players) => {\r\n    setPlayers(players);\r\n    setGameStarted(true);\r\n    setWinner(null);\r\n  }\r\n\r\n  const switchPlayer = () => {\r\n    setIsFirstPlayerTurn(!isFirstPlayerTurn)\r\n  }\r\n\r\n  const setPlayModeFunc = (props) => {\r\n    setPlayMode(props)\r\n    setIsStartFormNeedTimeout(true);\r\n  }\r\n\r\n  const setDifficultyLevelFunc = (props) => {\r\n    setDifficultyLevel(props)\r\n  }\r\n\r\n\r\n  const handleGameEnded = (status) => {\r\n    switch (status) {\r\n      case 'win':\r\n        let winnerIndex = isFirstPlayerTurn ? 0 : 1;\r\n        setWinner(players[winnerIndex].name);\r\n        players[winnerIndex].score += 1\r\n        break;\r\n\r\n      default: // Tie\r\n        setWinner(undefined);\r\n        break;\r\n    }\r\n  }\r\n\r\n  const playAgain = () => {\r\n    setWinner(null);\r\n    currentBoard.current.initBoard();\r\n  }\r\n\r\n  const backToMenu = () => {\r\n    setPlayers([]);\r\n    setGameStarted(false);\r\n    setIsFirstPlayerTurn(true);\r\n    playAgain();\r\n    setIsStartFormNeedTimeout(false)\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Title />\r\n      <Box class=\"flexbox-container\">\r\n        {gameStarted ? <Col><Score player={players[0]} /></Col> : null}\r\n        <Col><Board playMode={playMode} isFirstPlayerTurn={isFirstPlayerTurn} switchPlayer={switchPlayer} gameStarted={gameStarted} winner={winner} gameEnded={handleGameEnded} ref={currentBoard} difficultyLevel={difficultyLevel} /></Col>\r\n        {gameStarted ? <Col><Score player={players[1]} /></Col> : null}\r\n      </Box>\r\n\r\n      <Mode clsName={playMode !== 0 ? \"moving-left-mode\" : null} setPlayModeFunc={setPlayModeFunc} setDifficultyLevelFunc={setDifficultyLevelFunc} />\r\n      {gameStarted ?\r\n        <Info playersNames={players.map(player => player.name)} isFirstPlayerTurn={isFirstPlayerTurn} winner={winner} playAgain={playAgain} backToMenu={backToMenu} />\r\n        : playMode === 1 ?\r\n          <StartForm isNeedTimout={isStartFormNeedTimeout} isOnePlayer={true} setPlayModeFunc={setPlayModeFunc} handleStart={startGame} difficultyLevel={difficultyLevel} />\r\n          : playMode === 2 ?\r\n            <StartForm isNeedTimout={isStartFormNeedTimeout} isOnePlayer={false} setPlayModeFunc={setPlayModeFunc} handleStart={startGame} />\r\n            : null\r\n      }\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}